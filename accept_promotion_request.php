<?php
/**
 * Created by PhpStorm.
 * User: rex
 * Date: 5/26/2019
 * Time: 9:51 PM
 */

include_once 'auth_util.php';
include_once 'config.php';
include_once 'account_utils.php';
include_once 'EmailUtils.php';

$headers = apache_request_headers();

$validationError = AuthUtil::validate($headers);
if ($validationError != null) {
    echo $validationError;
    exit(0);
}
$username = $headers["username"];

$sql = "SELECT isStaff, isMentor FROM users WHERE username = '$username'";
$user = ApiHelper::queryOne($sql);

if ($user == null) {
    echo ApiHelper::buildErrorResponse("Something went wrong. Please try again later");
    exit(0);
}

if (!$user["isMentor"] && !$user["isStaff"]) {
    echo ApiHelper::buildErrorResponse("You do not have authorization to perform this action.");
    exit(0);
}

$json_body = file_get_contents('php://input');
$params = (array)json_decode($json_body);

$id = $params["id"];

$sql = "SELECT * FROM promotion WHERE id = $id";
$promotion = ApiHelper::queryOne($sql);

if ($promotion == null) {
    echo ApiHelper::buildErrorResponse("Something went wrong. Please try again later");
    exit(0);
}
$wannabeUsername = $promotion["username"];
$wannabe = ApiHelper::queryOne("SELECT mentor, isMerchant FROM users WHERE username = '$wannabeUsername'");
$status = $promotion["status"];
if ($status == "pending") {
    if (!$user["isMentor"]) {
        echo ApiHelper::buildErrorResponse("You do not have authorization to perform this action. You are not a mentor.");
        exit(0);
    }
    if ($username != $promotion["mentor"]) {
        echo ApiHelper::buildErrorResponse("You do not have authorization to perform this action.");
        exit(0);
    }
    $mentorName = $promotion["mentor"];
    $mentor = ApiHelper::queryOne("SELECT balance FROM users WHERE username = '$mentorName'");
    if ($mentor == null) {
        echo ApiHelper::buildErrorResponse("Something went wrong. Please try again later");
        exit(0);
    }

    $merchantCount = count(ApiHelper::query("SELECT id, username, isMerchant FROM users WHERE username IN (SELECT username FROM promotion WHERE mentor = '$mentorName' AND status = 'promoted') OR (isMerchant = 1 AND mentor = '$mentorName')"));
    $isSub = ApiHelper::rowExists("SELECT id FROM users WHERE username = '$wannabeUsername' AND isMerchant = 1 AND mentor = '$mentorName'");
    if ($merchantCount >= 30 && $isSub == false) {
        echo ApiHelper::buildErrorResponse("You have reached the maximum number of users that you can promote to merchant.");
        exit(0);
    }

    if ($mentor["balance"] < 200042) {
        echo ApiHelper::buildErrorResponse("Insufficient balance.");
        exit(0);
    }

    $au = new AccountUtils();
    $au->deductCredit($mentorName, 200000);
    $au->addHistory($mentorName, "-", 200000, "Deducted 200000 BDT for merchant promotion/renewal of " . $promotion["username"]);

    $sql = "UPDATE promotion SET status = 'verified' WHERE id = $id";
    if (ApiHelper::exec($sql) > 0) {
        EmailUtils::sendInformationEmail($promotion["username"], "Promotion approved",
            "Dear " . $promotion["username"]
            . "\n\nYour recent request to promote/renew yourself as merchant under tag of " . $promotion["mentor"]
            . " has been approved by " . $promotion["mentor"] . ". This request will be confirmed within 24 hours. Thank you!"
            . "\n\nRegards\nTeam 6t9"
            . "\n\n(NB: This is an autogenerated email. If you reply here, your reply will not reach us.)");

        EmailUtils::sendInformationEmail($promotion["mentor"], "Promotion is pending for confirmation",
            "Dear $mentorName"
            . "\n\nYour recent request to promote/renew " . $promotion["username"] . " as merchant under tag of yourself"
            . " has been sent to authority for confirmation and BDT 200000 has been deducted from your account."
            . "\n\nRegards\nTeam 6t9"
            . "\n\n(NB: This is an autogenerated email. If you reply here, your reply will not reach us.)");

        $staffs = ["aks", "dynamo", "rex", "pronoy"];
        foreach ($staffs as $staff) {
            EmailUtils::sendInformationEmail($staff, "New promotion request",
                "Dear $staff"
                . "\n\nThere is a new promotion request for " . $promotion["username"] . " under the tag of " . $promotion["mentor"]
                . ". Check out promotions requests in field to promote/decline."
                . "\n\nRegards\nTeam 6t9"
                . "\n\n(NB: This is an autogenerated email. If you reply here, your reply will not reach us.)"
            );
        }

        echo ApiHelper::buildSuccessResponse($id, "Request approved successfully. BDT 200000 has been deducted from your account.");
    }
} else if ($status == "verified" && $user["isStaff"]) {
    $mentorName = $promotion["mentor"];
    $merchantCount = count(ApiHelper::query("SELECT id, username, isMerchant FROM users WHERE username IN (SELECT username FROM promotion WHERE mentor = '$mentorName' AND status = 'promoted') OR (isMerchant = 1 AND mentor = '$mentorName')"));
    $isSub = ApiHelper::rowExists("SELECT id FROM users WHERE username = '$wannabeUsername' AND isMerchant = 1 AND mentor = '$mentorName'");
    if ($merchantCount >= 30 && $isSub == false) {
        echo ApiHelper::buildErrorResponse("This user has reached the maximum number of users that can be promoted to merchant. ($merchantCount)");
        exit(0);
    }
    if($mentorName == "vogoza" && $username != "rex") {
        echo ApiHelper::buildErrorResponse("Only rex can promote merchant renewal under vogoza.");
        exit(0);
    }
    $sql = "UPDATE promotion SET status = 'promoted' WHERE id = $id";
    if (ApiHelper::exec($sql) > 0) {
        EmailUtils::sendInformationEmail($promotion["username"], "Promotion confirmed",
            "Dear " . $promotion["username"]
            . "\n\nYour recent request to promote/renew yourself as merchant under tag of " . $promotion["mentor"]
            . " has been confirmed by authority. The merchant color and 200000 BDT credit will be assigned to you within 24 hrs. Thank you!"
            . "\n\nRegards\nTeam 6t9"
            . "\n\n(NB: This is an autogenerated email. If you reply here, your reply will not reach us.)");

        EmailUtils::sendInformationEmail($promotion["mentor"], "Promotion confirmed",
            "Dear " . $promotion["mentor"]
            . "\n\nYour recent request to promote/renew " . $promotion["username"] . " as merchant under tag of yourself"
            . " has been confirmed by authority.."
            . "\n\nRegards\nTeam 6t9"
            . "\n\n(NB: This is an autogenerated email. If you reply here, your reply will not reach us.)");

        echo ApiHelper::buildSuccessResponse($id, "Request approved successfully");
    } else {
        echo ApiHelper::buildErrorResponse("Something went wrong. Please try again later");
    }
} else {
    echo ApiHelper::buildErrorResponse("You do not have authorization to perform this action. There is a problem when accepting this request.");
}
